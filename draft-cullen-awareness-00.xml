<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> <!-- used by XSLT processors -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?> <!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?> <!-- generate a ToC -->
<?rfc tocdepth="3"?> <!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?> <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->
<!-- control vertical white space: 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?> <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?> <!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc  category="exp" docName="draft-cullen-awareness-00" ipr="trust200902">
  <front>
    <title abbrev="AP0">Awareness Protocol v0 (AP0): A Theory and System for the Interpretation and Distribution of Network-Accessible Functionality</title>
    <author fullname="Aedan Cullen" initials="A." surname="Cullen">
<!-- <organization/> -->
      <address>
        <!-- postal><street/><city/><region/><code/><country/></postal -->
<!-- <phone/> -->
<!-- <facsimile/> -->
      <email>aedancullen@gmail.com</email>
<!-- <uri/> -->
      </address>
    </author>
    <date year="2016" />
<!-- <area/> -->
<!-- <workgroup/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
    <abstract>
      <t>
          Awareness is a network ideology and protocol which attempts to generalize and address the difficulties of API continuity, functionality reuse, and service discovery in internet-connected applications. It proposes a novel architecture of information representation and processing between network-connected services, and defines methodology for computational configuration of relationships between operations on data.
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
        this document are to be interpreted as described in
        <xref target="RFC2119"/>.
      </t>
      <t>
        At a high level, Awareness represents each available data-processing function available on the network as an independent node with its own set of numerical inputs and outputs. Each node additionally maintains a directory of other nodes whose functionality is accessible. The network's goal is to collaboratively utilize the communication resources and computational ability of other accessible nodes to effectively assemble a processing pathway for the solution of a problem. A node may access the functinoality of other nodes in its directory (e.g. provide it with input and receive its output), ask a node in its directory to search for an optimal assignment of sample data to its inputs in order to produce desired outputs, or request that a node in its directory investigate the functionality of other known nodes in order to assemble a pipeline that meets the requirements of the requestor.
      </t>
      <t>
          This document first outlines the reasoning for suggestion of such an architecture, and then proceeds to specify a protocol for its use.
      </t>
    </section>
    <section anchor="SystemArchitecture" title="System Architecture">

        <t>
            This section overviews the structures and units of processing used in Awareness, and describes the features of each and their contribution to the entire functionality-distribution network.
        </t>


        <section anchor="DataRepresentation" title="Data Representation">
            <section anchor="Item" title="Item">
                <t>
                    The concept of Awareness is based on a very simple representation of data where each of the multiple parameters comprising a data point is stored as a floating-point value between 0.0 and 1.0, inclusive. A single data point, or item, is an array of one or more of these parameters. A data item's parameters carry meaning by their order, and are implicitly numerically indexed. Data items used for a specific purpose always maintain their parameter content and meaning (the number of parameters nor the parameter order does not change). Data items' parameters have 64-bit (double) precision. Although initially it might seem difficult to encode non-numeric data in such a representation, the practice of exclusively allowing a numerical representation makes data easier to be computationally understood by means of machine learning.
                </t>
            </section>
            <section anchor="Set" title="Set">
                <t>
                    It is often necessary to store and manipulate collections of data points, which are known as Sets. A Set provides the structure necessary to encode the input, state, and output of a Function over multiple iterations, and additionally can be used to model a new Function. It consists of three 'streams' of Items - one for input, one for state, and one for output. Within one stream, the number of parameters present in each Item contained in the stream must be equal. For example, a Set might have input Items all containing 4 parameters, state Items all containing 2 parameters, and output Items all containing 1 parameter. The number of Items contained in all three streams in a Set will be equal.
                </t>
            </section>
        </section>

        <section anchor="BlockStrucutre" title="Block Structure">

            <t>
                This section describes the abstractions used in an implementation of Awareness over a network.
            </t>

            <section anchor="Node" title="Node">
                <t>
                    A Node is a unit of network-connected functionality, which contains variable-length lists of Functions, Endpoints, Algorithms, and Assemblies. It maintains, through its list of Functions, one or more network-accessible operations on data. Through its list of Endpoints it stores information which can be used to contact other known Nodes over the network. Its Algorithms each manage a recursive search operation being performed over the Endpoints with which the Node is in contact, and its Assemblies store known pipelines of network-accessible data processing derived from such recursive search operations.
                </t>
            </section>
            <section anchor="Function" title="Function">
                <t>
                    A Function is representative of one locally-implemented, but network-accessible operation on data. A Function takes data as input and provides data as output. Each of the two uses of data (input and output) necessary within a Function is manipulated as an Item with a specific number of parameters. Therefore, a given Function has a unchanging input data 'size' (number of Item parameters), and an unchanging output data 'size'. A Function provides the ability for input data to be provided in exchange for output data.
                </t>
            </section>
            <section anchor="Endpoint" title="Endpoint">
                <t>
                    An Endpoint is very similar in operation to a Function, with the exception that it refers to a Function accessible over the network rather than implemented locally. However, it also provides the same ability for state data to be read or written, and for input data to be exchanged for output data. In this way an Endpoint additionally serves the purpose of a network client, and as such must also store the IP address and port at which the remote Node to which it refers can be accessed. Finally, an Endpoint provides the ability to be connected or disconnected to the remote Node.
                </t>
            </section>
            <section anchor="Algorithm" title="Algorithm">
                <t>
                    An Algorithm provides the recursive search method that is described in more detail in the Processing Analysis section. In summary, it is provided with a Set for which a suitable Assembly must be created (that as closely as possible models the inputs, states, and outputs of the Items of the Set), a recursion limit, and a time limit within which the process must be completed.
                </t>
            </section>
            <section anchor="Assembly" title="Assembly">
            	<t>
            		An Assembly is used to store data representing a completed pipeline of data processing over the network, which is comprised of uses of the Function of one or more accessible Endpoints (which refer to other Nodes over the network). It internally specifies the assignments between inputs of each function used and the outputs of the previous one, which are determined optimally for a specific Set to be modeled by an Algorithm. Additionally, because of this, an Assembly refers to a Set for which it is modeled.
            	</t>
            </section>
        </section>

    </section>
    <section anchor="ProtocolVocabulary" title="Protocol Vocabulary">
        <section anchor="ProtocolDataUnit" title="Protocol Data Unit">
            <t>
                This section describes the format of the Protocol Data Unit (PDU), the standard unit of network communication in the Awareness protocol. The following table lists the components of a PDU, in order of transmission over the network.
            </t>
            <texttable anchor="ProtocolDataUnitFormat" title="Protocol Data Unit Format">
            	<ttcol align='center'>Length</ttcol>
            	<ttcol align='center'>Meaning</ttcol>
            	<c>1 byte</c><c>Version Byte</c>
            	<c>1 byte</c><c>Unit Type Byte</c>
            	<c>1 byte</c><c>Transmission Cause Type Byte</c>
            	<c>1 byte</c><c>Requested Response Type Byte</c>
            	<c>1 byte</c><c>Next Requested Response Type Byte</c>
            	<c>8 bytes (64 bits) unsigned integer</c><c>Data Length Integer</c>
            	<c>(varies)</c><c>Data Bytes</c>
            </texttable>
            <t>
                The following conditions apply to transmission of any PDU:
                <list style="numbers">
                    <t>Data items MUST be transmitted in the order listed in the table above.</t>
                    <t>Data items MUST be encoded as described in the sections following, in little-endian (network) byte order.</t>
                </list>
            </t>
            <section anchor="VersionByte" title="Version Byte">
                <t>
                    The Version Byte is representative of the version and format of the Awareness protocol in use, and is provided to ensure that integration of future protocol versions will be possible.
                </t>
                <t> 
                    The following conditions apply to transmission of the Version Byte:
                    <list style="numbers">
                        <t>The Version Byte MUST be equal to 0x00 if the protocol described here is being implemented.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Version Byte:
                    <list style="numbers">
                        <t>If the Version Byte is not found equal to the Version Byte of a supported protocol version, the receiving implementation MUST send an Incompatible PDU.</t>
                    </list>
                </t>
            </section>
            <section anchor="UnitTypeByte" title="Unit Type Byte">
                <t>
                    The Unit Type Byte is representative of the parsing that should be enacted for the Data Bytes section of the specific PDU in which it occurs. It will also be referred to as describing the "PDU type".
                </t>
                <t>
                    The following conditions apply to transmission of the Unit Type Byte:
                    <list style="numbers">
                        <t>The value of the Unit Type Byte MUST, according to the protocol version specified by the Version Byte, describe correctly the format of the Data Bytes.</t>
                        <t>Any PDU transmitted following the reception of another PDU MUST have its Unit Type byte set to the same value present in the received Requested Response Type Byte.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Unit Type Byte:
                    <list style="numbers">
                        <t>The Unit Type Byte MUST be used in determination of the format with which to decode the Data Bytes.</t>
                        <t>Implementations MUST NOT consider PDUs with equivalent Unit Type Bytes compatible if their Version Bytes are not also equivalent.</t>
                        <t>If a Unit Type Byte is received that does not carry a value of a possible PDU type as defined in this specification, a Nonsense Unit PDU MUST be sent.</t>
                    </list>
                </t>
            </section>
            <section anchor="TransmissionCauseTypeByte" title="Transmission Cause Type Byte">
                <t>
                    The Transmission Cause Type Byte is representative of the Unit Type Byte of the Protocol Data Unit that was the cause of the sending of the Protocol Data Unit in which the Transmission Cause Type Byte occurs.
                </t>
                <t>
                    The following conditions apply to transmission of the Transmission Cause Type Byte:
                    <list style="numbers">
                        <t>The Transmission Cause Type Byte MUST be equal to the Unit Type Byte of the PDU to which it responds if the Requested Response Type Byte of the previously received PDU was not equal to 0xFF.</t>
                        <t>If a PDU was previsouly received that had a Requested Response Type Byte equal to 0xFF, the Transmission Cause Type Byte MUST be equal to 0xFF.</t>
                        <t>The Transmission Cause Type Byte MUST carry only values of possible PDU types as described in this specification.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Transmission Cause Type Byte:
                    <list style="numbers">
                        <t>The Transmission Cause Type Byte MUST be compared with the Unit Type Byte of the PDU most recently transmitted if the Unit Type Byte of the recently transmitted PDU was not 0xFF, and a Nonsense Unit PDU MUST be sent if the two do not match.</t>
                        <t>In the case that a received Transmission Cause Type Byte carries a value of 0xFF when a PDU with a Requested Response Type Byte not equal to 0xFF was previously sent, a Nonsense Unit PDU MUST be sent.</t>
                    </list>
                </t>
            </section>
            <section anchor="RequestedResponseTypeByte" title="Requested Response Type Byte">
                <t> 
                    The Requested Response Type Byte is representative of the Unit Type Byte of the Protocol Data Unit which the requesting node wishes to receive as a result of its transmission to the receiving node.
                </t>
                <t>
                    The following conditions apply to transmission of the Requested Response Type Byte:
                    <list style="numbers">
                        <t>The Requested Response Type Byte MUST carry only values of possible PDU types that are listed as valid responses to the PDU type in which it occurs. Valid responses to each PDU type are described in the Data Unit Types section.</t>
                        <t>The Requested Response Type Byte MUST be set to 0xFF only if a response is not expected.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Requested Response Type Byte:
                    <list style="numbers">
                        <t>If a Requested Response Type Byte is received that does not carry a value of 0xFF, a PDU with a Unit Type Byte equal to the value of the received Requested Response Type Byte MUST be sent in reply.</t>
                    </list>
                </t>
            </section>
            <section anchor="NextRequestedResponseTypeByte" title="Next Requested Response Type Byte">
            	<t>
            		The Next Requested Response Type Byte specifies the expected value of the Requested Response Type Byte in the PDU sent as a reply to the one in which the Next Requested Response Type Byte occurs. In other words, this byte specifies the PDU type which the sending Node wishes to send next to the receiving Node after it has replied in accordance with the first Requested Response Type Byte.
            	</t>
            	<t>
            		The following conditions apply to transmission of the Next Requested Response Type Byte:
                    <list style="numbers">
                        <t>The Next Requested Response Type Byte MUST carry only values of possible PDU types that are listed as valid responses to a PDU of the type specified in the Requested Response Type Byte.</t>
                        <t>The Next Requested Response Type Byte MUST be set to 0xFF in the case that the transmitting Node wishes to receive a PDU in response that has a Requested Response Type Byte equal to 0xFF.</t>
                    </list>
            	</t>
            	<t>
            		The following conditions apply to reception of the Next Requested Response Type Byte:
                    <list style="numbers">
                        <t>The PDU sent in response to a PDU containing a Requested Response Type Byte not equal to 0xFF MUST have its own Requested Response Type Byte set to the value of the Next Requested Response Type Byte in the received PDU.</t>
                    </list>
            	</t>
            </section>
            <section anchor="DataLengthInteger" title="Data Length Integer">
                <t>
                    The Data Length Integer is a 64-bit unsigned integer representative of the number of bytes to be sent in the following Data Bytes section of the Protocol Data Unit in which it occurs.
                </t>
                <t>
                    The following conditions apply to transmission of the Data Length Integer:
                    <list style="numbers">
                        <t>The Data Length Integer MUST be a little-endian 64-bit unsigned integer equal to the number of bytes transmitted in the following Data Bytes section of a PDU.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Data Length Integer:
                    <list style="numbers">
                        <t>If the value of the Data Length Integer is found not to match a possible length of the Data Bytes section in a possible PDU type, a Nonsesne Data PDU MUST be sent.</t>
                    </list>
                </t>
            </section>
            <section anchor="DataBytes" title="Data Bytes">
                <t>
                    The Data Bytes section is a flexible representation of the meaningful information transmitted by a Protocol Data Unit.
                </t>
                <t>
                    The following conditions apply to transmission of the Data Bytes:
                    <list style="numbers">
                        <t>The Data Bytes MUST be encoded as specified by the Unit Type Byte.</t>
                        <t>The Data Bytes MUST not exceed the value of the Data Length Integer in length.</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of the Data Bytes:
                    <list style="numbers">
                        <t>The Data Bytes MUST only be read until their received length is equal to the value of the Data Length Integer.</t>
                        <t>If too few or too many Data Bytes are received, the receiving implementation MUST send a Nonsense Data PDU.</t>
                    </list>
                </t>
            </section>
        </section>
        <section anchor="DataUnitTypes" title="Data Unit Types">
            <section anchor="Nothing" title="Nothing">
                <t>
                    A Unit Type Byte equal to 0x00 specifies that the PDU in which it is received is of the Nothing type. A Nothing PDU's Data Bytes section contains no data.
                </t>
                <t>
                    The following conditions apply to transmission of a Nothing PDU:
                    <list style="numbers">
                        <t>The vluae of the Unit Type Byte MUST be 0x00.</t>
                        <t>The value of the Requested Response Type Byte MUST be 0xFF, 0x08 (Item Transfer), or 0x09 (Set Transfer).</t>
                    </list>
                </t>
                <t>
                    The following conditions apply to reception of a Nothing PDU:
                </t>
            </section>
            <section anchor="SearchCategory" title="Search Category of Types">
                <section anchor="LocalSearch" title="Local Search">
                    <t>
                        A Unit Type Byte equal to 0x01 specifies that the PDU in which it is received is of the Local Search type.
                    </t>
                    <texttable anchor="DataBytesFormatfortheLocalSearchPDU" title="Data Bytes Format for the Local Search PDU">
                        <ttcol align='center'>1 byte</ttcol>
                        <ttcol align='center'>4 bytes (32 bits) unsigned integer</ttcol>
                        <c>Depth Limit</c>
                        <c>Timeout Milliseconds</c>
                    </texttable>
                    <t>
                        The following conditions apply to transmission of a Local Search PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Local Search PDU:
                    </t>
                </section>
                <section anchor="PropagatingSearch" title="Propagating Search">
                    <t>
                        A Unit Type Byte equal to 0x02 specifies that the PDU in which it is received is of the Propagating Search type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Propagating Search PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Propagating Search PDU:
                    </t>
                </section>
            </section>
            <section anchor="DataCategory" title="Data Category of Types">
                <section anchor="GetAcceptableData" title="Get Acceptable Data">
                    <t>
                        A Unit Type Byte equal to 0x03 specifies that the PDU in which it is received is of the Get Acceptable Data type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Get Acceptable Data PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Get Acceptable Data PDU:
                    </t>
                </section>
                <section anchor="ProcessInputData" title="Process Input Data">
                	<t>
                		A Unit Type Byte equal to 0x04 specifies that the PDU in which it is received is of the Process Input Data type.
                	</t>
                	<t>
                		The following conditions apply to transmission of a Process Input Data PDU:
                	</t>
                	<t>
                		The following conditions apply to reception of a Process Input Data PDU:
                	</t>
                </section>
            </section>
            <section anchor="TransferCategory" title="Transfer Category of Types">
                <section anchor="ItemTransfer" title="Item Transfer">
                    <t>
                        A Unit Type Byte equal to 0x05 specifies that the PDU in which it is received is of the Item Transfer type.
                    </t>
                    <t>
                        The following conditions apply to transmission of an Item Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of an Item Transfer PDU:
                    </t>
                </section>
                <section anchor="SetTransfer" title="Set Transfer">
                    <t>
                        A Unit Type Byte equal to 0x06 specifies that the PDU in which it is received is of the Set Transfer type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Set Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Set Transfer PDU:
                    </t>
                </section>
                <section anchor="AssemblyTransfer" title="Assembly Transfer">
                    <t>
                        A Unit Type Byte equal to 0x07 specifies that the PDU in which it is received is of the Assembly Transfer type.
                    </t>
                    <t>
                        The following conditions apply to transmission of an Assembly Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of an Assembly Tranfer PDU:
                    </t>
                </section>
            </section>
            <section anchor="ErrorCategory" title="Error Category of Types">
                <section anchor="UnfulfillableRequest" title="Unfulfillable Request">
                    <t>
                        A Unit Type Byte equal to 0x08 specifies that the PDU in which it is received is of the Unfulfillable Request type.
                    </t>
                    <t>
                        The following conditions apply to transmission of an Unfulfillable Request PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of an Unfulfillable Request PDU:
                    </t>
                </section>
                <section anchor="NonsenseUnit" title="Nonsense Unit">
                    <t>
                        A Unit Type Byte equal to 0x09 specifies that the PDU in which it is received is of the Nonsense Unit type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Nonsense Unit PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Nonsense Unit PDU:
                    </t>
                </section>
                <section anchor="NonsenseData" title="Nonsense Data">
                    <t>
                        A Unit Type Byte equal to 0x10 specifies that the PDU in which it is received is of the Nonsense Data type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Nonsense Data PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Nonsense Data PDU:
                    </t>
                </section>
                <section anchor="Incompatible" title="Imcompatible">
                    <t>
                        A Unit Type Byte equal to 0x11 specifies that the PDU in which it is received is of the Incompatible type.
                    </t>
                    <t>
                        The following conditions apply to transmission of an Incompatible PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of an Incompatible PDU:
                    </t>
                </section>
            </section>
        </section>
    </section>
    <section anchor="ProcessingAnalysis" title="Processing Analysis">
    </section>
    <section anchor="Security" title="Security Considerations">
    </section>
    <section anchor="IANA" title="IANA Considerations">
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
  </back>
</rfc>
